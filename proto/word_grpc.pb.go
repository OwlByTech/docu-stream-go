// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.1
// source: word.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Word_Apply_FullMethodName = "/word.Word/Apply"
)

// WordClient is the client API for Word service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WordClient interface {
	Apply(ctx context.Context, in *WordApplyReq, opts ...grpc.CallOption) (*WordApplyRes, error)
}

type wordClient struct {
	cc grpc.ClientConnInterface
}

func NewWordClient(cc grpc.ClientConnInterface) WordClient {
	return &wordClient{cc}
}

func (c *wordClient) Apply(ctx context.Context, in *WordApplyReq, opts ...grpc.CallOption) (*WordApplyRes, error) {
	out := new(WordApplyRes)
	err := c.cc.Invoke(ctx, Word_Apply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WordServer is the server API for Word service.
// All implementations must embed UnimplementedWordServer
// for forward compatibility
type WordServer interface {
	Apply(context.Context, *WordApplyReq) (*WordApplyRes, error)
	mustEmbedUnimplementedWordServer()
}

// UnimplementedWordServer must be embedded to have forward compatible implementations.
type UnimplementedWordServer struct {
}

func (UnimplementedWordServer) Apply(context.Context, *WordApplyReq) (*WordApplyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Apply not implemented")
}
func (UnimplementedWordServer) mustEmbedUnimplementedWordServer() {}

// UnsafeWordServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WordServer will
// result in compilation errors.
type UnsafeWordServer interface {
	mustEmbedUnimplementedWordServer()
}

func RegisterWordServer(s grpc.ServiceRegistrar, srv WordServer) {
	s.RegisterService(&Word_ServiceDesc, srv)
}

func _Word_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WordApplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Word_Apply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordServer).Apply(ctx, req.(*WordApplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Word_ServiceDesc is the grpc.ServiceDesc for Word service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Word_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "word.Word",
	HandlerType: (*WordServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Apply",
			Handler:    _Word_Apply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "word.proto",
}
