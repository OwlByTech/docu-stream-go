// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.3
// source: word.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Word_Apply_FullMethodName = "/word.Word/Apply"
)

// WordClient is the client API for Word service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WordClient interface {
	Apply(ctx context.Context, opts ...grpc.CallOption) (Word_ApplyClient, error)
}

type wordClient struct {
	cc grpc.ClientConnInterface
}

func NewWordClient(cc grpc.ClientConnInterface) WordClient {
	return &wordClient{cc}
}

func (c *wordClient) Apply(ctx context.Context, opts ...grpc.CallOption) (Word_ApplyClient, error) {
	stream, err := c.cc.NewStream(ctx, &Word_ServiceDesc.Streams[0], Word_Apply_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &wordApplyClient{stream}
	return x, nil
}

type Word_ApplyClient interface {
	Send(*WordApplyReq) error
	Recv() (*WordApplyRes, error)
	grpc.ClientStream
}

type wordApplyClient struct {
	grpc.ClientStream
}

func (x *wordApplyClient) Send(m *WordApplyReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *wordApplyClient) Recv() (*WordApplyRes, error) {
	m := new(WordApplyRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WordServer is the server API for Word service.
// All implementations must embed UnimplementedWordServer
// for forward compatibility
type WordServer interface {
	Apply(Word_ApplyServer) error
	mustEmbedUnimplementedWordServer()
}

// UnimplementedWordServer must be embedded to have forward compatible implementations.
type UnimplementedWordServer struct {
}

func (UnimplementedWordServer) Apply(Word_ApplyServer) error {
	return status.Errorf(codes.Unimplemented, "method Apply not implemented")
}
func (UnimplementedWordServer) mustEmbedUnimplementedWordServer() {}

// UnsafeWordServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WordServer will
// result in compilation errors.
type UnsafeWordServer interface {
	mustEmbedUnimplementedWordServer()
}

func RegisterWordServer(s grpc.ServiceRegistrar, srv WordServer) {
	s.RegisterService(&Word_ServiceDesc, srv)
}

func _Word_Apply_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WordServer).Apply(&wordApplyServer{stream})
}

type Word_ApplyServer interface {
	Send(*WordApplyRes) error
	Recv() (*WordApplyReq, error)
	grpc.ServerStream
}

type wordApplyServer struct {
	grpc.ServerStream
}

func (x *wordApplyServer) Send(m *WordApplyRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *wordApplyServer) Recv() (*WordApplyReq, error) {
	m := new(WordApplyReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Word_ServiceDesc is the grpc.ServiceDesc for Word service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Word_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "word.Word",
	HandlerType: (*WordServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Apply",
			Handler:       _Word_Apply_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "word.proto",
}
