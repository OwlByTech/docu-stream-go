// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.3
// source: convert.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Convert_WordToPdf_FullMethodName = "/convert.Convert/WordToPdf"
)

// ConvertClient is the client API for Convert service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConvertClient interface {
	WordToPdf(ctx context.Context, opts ...grpc.CallOption) (Convert_WordToPdfClient, error)
}

type convertClient struct {
	cc grpc.ClientConnInterface
}

func NewConvertClient(cc grpc.ClientConnInterface) ConvertClient {
	return &convertClient{cc}
}

func (c *convertClient) WordToPdf(ctx context.Context, opts ...grpc.CallOption) (Convert_WordToPdfClient, error) {
	stream, err := c.cc.NewStream(ctx, &Convert_ServiceDesc.Streams[0], Convert_WordToPdf_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &convertWordToPdfClient{stream}
	return x, nil
}

type Convert_WordToPdfClient interface {
	Send(*WordToPdfReq) error
	Recv() (*WordToPdfRes, error)
	grpc.ClientStream
}

type convertWordToPdfClient struct {
	grpc.ClientStream
}

func (x *convertWordToPdfClient) Send(m *WordToPdfReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *convertWordToPdfClient) Recv() (*WordToPdfRes, error) {
	m := new(WordToPdfRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConvertServer is the server API for Convert service.
// All implementations must embed UnimplementedConvertServer
// for forward compatibility
type ConvertServer interface {
	WordToPdf(Convert_WordToPdfServer) error
	mustEmbedUnimplementedConvertServer()
}

// UnimplementedConvertServer must be embedded to have forward compatible implementations.
type UnimplementedConvertServer struct {
}

func (UnimplementedConvertServer) WordToPdf(Convert_WordToPdfServer) error {
	return status.Errorf(codes.Unimplemented, "method WordToPdf not implemented")
}
func (UnimplementedConvertServer) mustEmbedUnimplementedConvertServer() {}

// UnsafeConvertServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConvertServer will
// result in compilation errors.
type UnsafeConvertServer interface {
	mustEmbedUnimplementedConvertServer()
}

func RegisterConvertServer(s grpc.ServiceRegistrar, srv ConvertServer) {
	s.RegisterService(&Convert_ServiceDesc, srv)
}

func _Convert_WordToPdf_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConvertServer).WordToPdf(&convertWordToPdfServer{stream})
}

type Convert_WordToPdfServer interface {
	Send(*WordToPdfRes) error
	Recv() (*WordToPdfReq, error)
	grpc.ServerStream
}

type convertWordToPdfServer struct {
	grpc.ServerStream
}

func (x *convertWordToPdfServer) Send(m *WordToPdfRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *convertWordToPdfServer) Recv() (*WordToPdfReq, error) {
	m := new(WordToPdfReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Convert_ServiceDesc is the grpc.ServiceDesc for Convert service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Convert_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "convert.Convert",
	HandlerType: (*ConvertServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WordToPdf",
			Handler:       _Convert_WordToPdf_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "convert.proto",
}
